* AnkiOrg

AnkiOrg is an add-on to Emacs [[https://github.com/louietan/anki-editor][anki-editor]] which can pull notes from [[https://apps.ankiweb.net][Anki]], convert them to anki-editor's org representation of an Anki note, and insert them into an org-mode buffer. It provides two ways of interfacing with Anki: either via [[https://github.com/FooSoft/anki-connect][Anki-Connect]] or by more directly accessing the Anki SQL database using [[https://github.com/pekingduck/emacs-sqlite3-api][emacs-sqlite3-api]] (this can be faster and works when Anki is not running). The html notes returned by Anki are converted to org using [[https://pandoc.org][pandoc]].

Currently, the code is a mess (TODO), but I've been successfully using this to export all my existing Anki decks to org when migrating to anki-editor. From that moment on I've been managing all my Anki notes from Emacs using anki-editor. It works great! In my Emacs-Anki workflow, I also make use of [[https://github.com/nobiot/org-transclusion][org-transclusion]] for providing card context and [[https://gitlab.com/matsievskiysv/math-preview][math-preview]] for previewing MathJax equations.

Since I started working on this, [[https://github.com/eyeinsky/org-anki][org-anki]] has emerged as a feasible alternative to anki-editor (whose original repository is unmaintained) and the pull features provided in this package. However, org-anki does not provide all the features of anki-editor and AnkiOrg, so this might still be an alternative worth exploring. (TODO: Write more detailed comparison.)


** Installation

First install the following dependencies outside Emacs: [[https://www.gnu.org/software/emacs/][Emacs]], [[https://apps.ankiweb.net][Anki]], and [[https://pandoc.org][pandoc]]. Make sure pandoc is in the path used by Emacs. Depending on what interface to Anki you want to use, you then need to install a) [[https://github.com/FooSoft/anki-connect][Anki-Connect]] or b) [[https://github.com/pekingduck/emacs-sqlite3-api][emacs-sqlite3-api]]. 

/Note: Not all versions of Anki/Anki-Connect may work. Things are only known to work with version Anki version [[https://github.com/ankitects/anki/releases/tag/2.1.45][2.1.45]] and Anki-Connect version 22.7.14.0. Some newer versions of Anki may not work with all functions of the sqlite3 interface (TODO)./

Next, you need my fork of anki-editor, [[https://github.com/orgtre/anki-editor][orgtre/anki-editor]]. The difference to the original [[https://github.com/louietan/anki-editor][louietan/anki-editor]] is that I merged the develop branch and made a few minor adjustments (e.g. to allow a more flexible note structure).

Finally, you should now have all dependencies and can install this package in whatever way you like.

I use the following to install this package and the necessary Emacs packages with [[https://github.com/radian-software/straight.el][straight.el]]:
#+begin_src elisp
(use-package sqlite3
  :straight (:host github :repo "pekingduck/emacs-sqlite3-api"))

(use-package anki-editor  
  :straight (:host github :repo "orgtre/anki-editor")
  :commands anki-editor-mode
  :custom (anki-editor-latex-style 'mathjax))

(use-package ankiorg
  :straight (:host github :repo "orgtre/ankiorg")
  :commands
  ankiorg-pull-notes
  ankiorg-buffer-get-media-files
  ankiorg-pull-tags
  :custom
  (ankiorg-sql-database
   "my-path-to/collection.anki2")
  (ankiorg-media-directory
   "my-path-to/img"))
#+end_src


** Usage

From an org buffer, run the command =ankiorg-pull-notes= and select the deck you want to pull. (TODO: Write function to pull all decks.) The org representations of the Anki notes will be inserted into the buffer. Next run command =ankiorg-buffer-get-media-files= from the same buffer to get the media files linked in the buffer from Anki and save them to your =ankiorg-media-directory=. (TODO: Make this one call.)

If using the SQL interface, it is strongly recommended that you work with a (recent) copy of your Anki SQL database, whose path needs to be set in =ankiorg-sql-database=. Anki and Anki-Connect need to be running when using the Anki-Connect interface, and (for now) also when retrieving media files. (TODO: Allow retrieving media files via the SQL interface too.) Variable =ankiorg-use-sql-api= controls which interface is used for retrieving notes. (TODO: Write a detailed usage example.)


** Limitations and known issues

=ankiorg-pull-notes= is not a perfect inverse of =anki-editor-push-notes=. The main issue is that some line breaks are not properly preserved. I use a bunch of regex's in the output buffer to correct for most of this. (TODO: Integrate these into the package and fix this better.) 

Also, if you use Anki's [[https://github.com/glutanimate/mini-format-pack][mini-format-pack]] add-on, there is an unfixed [[https://github.com/glutanimate/mini-format-pack/issues/26][bug]] in it which causes pandoc to parse nested lists incorrectly. The default regex replacement in the variable =ankiorg-anki-replacements= should correct for this up to one level of nesting, but not further.

Pull requests, issue reports, and suggestions are most welcome!
